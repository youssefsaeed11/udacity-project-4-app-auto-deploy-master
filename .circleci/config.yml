version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --region eu-central-1 \
              --stack-name=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack \
              --stack-name=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end build
          command: |
             cd frontend
             npm install
             npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end build
          command: |
             cd frontend
             npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: install tar and gzip
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --region eu-central-1 \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --region eu-central-1 \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --region eu-central-1 \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - run: cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment  
  
  run_db_migrations_for_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Run DB migrations
          command: |
            cd backend
            npm run migrations >> migration_output.txt
            cat migration_output.txt
      - run:
          name: Store migration result in a file.
          command: |
            cd backend
            if grep -q "has been executed successfully." migration_output.txt
            then
              touch ~/project/.circleci/outputs/db_migration_success
            fi
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy_backend_artifact:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm ansible zip
            pip install awscli
      - run:
          name: Build backend app
          command: |
            cd ~/project/backend
            npm i
            npm run build
            cd dist
            cp ../package.json .
            zip -rq dist.zip *
            mkdir -p ~/project/.circleci/ansible/roles/deploy_backend/files/
            mv dist.zip ~/project/.circleci/ansible/roles/deploy_backend/files/
      - add_ssh_keys:
          fingerprints: [ "ca:01:e2:f1:82:52:bd:1d:94:c2:17:83:9e:d5:d8:a4" ]
      - run:
          name: Setup EC2 instance & copy compiled backend to the EC2 instance
          command: |
            ls ~/project/.circleci/ansible/roles/deploy_backend/files/
            cd ~/project/backend
            ansible-galaxy install weareinteractive.environment
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/playbook.yml
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations

  package_frontend_artifact:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Package frontend app
          command: |
            export API_URL=`cat .circleci/outputs/backend_url.txt`
            echo "API_URL: $API_URL"
            cd ~/project/frontend
            npm i
            npm install typescript@rc
            npm run build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/dist
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations

  deploy_frontend_artifact:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl tar
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Copy frontend to s3 bucket.
          command: |
            cd ~/project/frontend
            aws s3 cp dist s3://udapeople-prod-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations

  smoke_test_frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Package frontend app
          command: |
            if curl -s http://udapeople-prod-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.eu-central-1.amazonaws.com/ | grep "Welcome"
            then
            return 0
            else
            return 1
            fi
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations

  smoke_test_backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Test backend app.
          command: |
            API_URL=`cat .circleci/outputs/backend_url.txt`
            echo $API_URL
            curl -s $API_URL/api/status
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations


  deploy_cloudfront_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy the backend infrastructure using cloudformation
          command: |
            OLD_WORKFLOW_ID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`UdapeopleWorkflowID\`].Value" \
              --no-paginate --output text)
            echo "OLD_WORKFLOW_ID: $OLD_WORKFLOW_ID."
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            printf '%s\n' "${STACKS[@]}"
            aws cloudformation deploy \
              --template-file .circleci/cloudformation/cloudfront_infrastructure.yml \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-prod-cloudfront
            if printf '%s\n' "${STACKS[@]}" | grep -q "$OLD_WORKFLOW_ID"; then
              echo "Removing previous stack"
              aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOW_ID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOW_ID}"
            fi
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]   
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - package_frontend_artifact:
          requires:
            - deploy_infrastructure
            - run_db_migrations_for_backend
      - deploy_frontend_artifact:
          requires:
            - package_frontend_artifact
      - smoke_test_backend:
          requires:
            - deploy_backend_artifact
      - smoke_test_frontend:
          requires:
            - deploy_frontend_artifact
      - deploy_cloudfront_infrastructure:
          requires:
            - smoke_test_backend
            - smoke_test_frontend
  